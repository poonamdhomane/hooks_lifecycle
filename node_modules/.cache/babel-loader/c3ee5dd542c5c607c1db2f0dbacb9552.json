{"ast":null,"code":"let logsToRender = [];\nlet intervalId = null; // Logger logs outside of React context to avoid\n// re-renders due to logging (for the demo)\n\nconst logger = {\n  info: function (component, message, hook) {\n    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      args[_key - 3] = arguments[_key];\n    }\n\n    logsToRender.push(`<span class='cmp'>${component}:&nbsp;</span>\n      <span class='hook'>${hook || \"\"}</span>\n      <span class='msg'>${message}</span>\n      <span class='addl'>${args.map(arg => arg.toString()).join(\" \")}</span>`);\n\n    this._renderQueue();\n  },\n  _renderQueue: function () {\n    if (intervalId) {\n      return;\n    }\n\n    intervalId = setInterval(() => {\n      if (logsToRender.length > 0) {\n        const li = document.createElement(\"li\");\n        li.innerHTML = logsToRender.shift();\n        document.getElementById(\"logger\").appendChild(li);\n\n        if (logsToRender.length === 0 && intervalId) {\n          clearInterval(intervalId);\n          intervalId = null;\n        }\n      }\n    }, 200);\n  },\n  clear: function () {\n    document.getElementById(\"logger\").innerHTML = \"\";\n  }\n};\nmodule.exports = logger;","map":{"version":3,"sources":["/Users/poonam/Development/Projects/healthservice/code/react/snehal_hospital/src/app/logger/logger.jsx"],"names":["logsToRender","intervalId","logger","info","component","message","hook","args","push","map","arg","toString","join","_renderQueue","setInterval","length","li","document","createElement","innerHTML","shift","getElementById","appendChild","clearInterval","clear","module","exports"],"mappings":"AAAA,IAAIA,YAAY,GAAG,EAAnB;AACA,IAAIC,UAAU,GAAG,IAAjB,C,CAEA;AACA;;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE,UAAUC,SAAV,EAAqBC,OAArB,EAA8BC,IAA9B,EAA6C;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACjDP,IAAAA,YAAY,CAACQ,IAAb,CACG,qBAAoBJ,SAAU;AACrC,2BAA2BE,IAAI,IAAI,EAAG;AACtC,0BAA0BD,OAAQ;AAClC,2BAA2BE,IAAI,CAACE,GAAL,CAAUC,GAAD,IAASA,GAAG,CAACC,QAAJ,EAAlB,EAAkCC,IAAlC,CAAuC,GAAvC,CAA4C,SAJnE;;AAMA,SAAKC,YAAL;AACD,GATY;AAWbA,EAAAA,YAAY,EAAE,YAAY;AACxB,QAAIZ,UAAJ,EAAgB;AACd;AACD;;AACDA,IAAAA,UAAU,GAAGa,WAAW,CAAC,MAAM;AAC7B,UAAId,YAAY,CAACe,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,cAAMC,EAAE,GAAGC,QAAQ,CAACC,aAAT,CAAuB,IAAvB,CAAX;AACAF,QAAAA,EAAE,CAACG,SAAH,GAAenB,YAAY,CAACoB,KAAb,EAAf;AACAH,QAAAA,QAAQ,CAACI,cAAT,CAAwB,QAAxB,EAAkCC,WAAlC,CAA8CN,EAA9C;;AAEA,YAAIhB,YAAY,CAACe,MAAb,KAAwB,CAAxB,IAA6Bd,UAAjC,EAA6C;AAC3CsB,UAAAA,aAAa,CAACtB,UAAD,CAAb;AACAA,UAAAA,UAAU,GAAG,IAAb;AACD;AACF;AACF,KAXuB,EAWrB,GAXqB,CAAxB;AAYD,GA3BY;AA6BbuB,EAAAA,KAAK,EAAE,YAAY;AACjBP,IAAAA,QAAQ,CAACI,cAAT,CAAwB,QAAxB,EAAkCF,SAAlC,GAA8C,EAA9C;AACD;AA/BY,CAAf;AAiCAM,MAAM,CAACC,OAAP,GAAiBxB,MAAjB","sourcesContent":["let logsToRender = [];\nlet intervalId = null;\n\n// Logger logs outside of React context to avoid\n// re-renders due to logging (for the demo)\nconst logger = {\n  info: function (component, message, hook, ...args) {\n    logsToRender.push(\n      `<span class='cmp'>${component}:&nbsp;</span>\n      <span class='hook'>${hook || \"\"}</span>\n      <span class='msg'>${message}</span>\n      <span class='addl'>${args.map((arg) => arg.toString()).join(\" \")}</span>`\n    );\n    this._renderQueue();\n  },\n\n  _renderQueue: function () {\n    if (intervalId) {\n      return;\n    }\n    intervalId = setInterval(() => {\n      if (logsToRender.length > 0) {\n        const li = document.createElement(\"li\");\n        li.innerHTML = logsToRender.shift();\n        document.getElementById(\"logger\").appendChild(li);\n\n        if (logsToRender.length === 0 && intervalId) {\n          clearInterval(intervalId);\n          intervalId = null;\n        }\n      }\n    }, 200);\n  },\n\n  clear: function () {\n    document.getElementById(\"logger\").innerHTML = \"\";\n  },\n};\nmodule.exports = logger;\n"]},"metadata":{},"sourceType":"module"}